import 'package:finalc/graphs/app_resources.dart';
import 'package:finalc/graphs/indicator.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fl_chart/fl_chart.dart';

class DashboardPage extends StatefulWidget {
  const DashboardPage({super.key});

  @override
  State<DashboardPage> createState() => _DashboardPageState();
}

class _DashboardPageState extends State<DashboardPage> {
  int? breakfastCalories;
  int? lunchCalories;
  int? dinnerCalories;

  int? totalProteinCalories;
  int? totalFatsCalories;
  int? totalCarbsCalories;

  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    updateCalories();
  }

  void updateCalories() async {
    final DateTime now = DateTime.now();
    final DateTime today = DateTime(now.year, now.month, now.day);
    final DateTime tomorrow = today.add(const Duration(days: 1));

    try {
      final querySnapshot = await FirebaseFirestore.instance
          .collection('meals')
          .where('trackedTime', isGreaterThanOrEqualTo: today)
          .where('trackedTime', isLessThan: tomorrow)
          .get();

      int breakfast = 0;
      int lunch = 0;
      int dinner = 0;

      int proteinCalories = 0;
      int fatsCalories = 0;
      int carbsCalories = 0;

      for (var doc in querySnapshot.docs) {
        final data = doc.data();
        final int protein = data['protein'];
        final int fats = data['fats'];
        final int carbs = data['carbs'];
        final int totalCalories = (protein * 4) + (fats * 9) + (carbs * 4);

        proteinCalories += (protein * 4);
        fatsCalories += (fats * 9);
        carbsCalories += (carbs * 4);

        final String mealType = data['type'];
        if (mealType == 'Breakfast') {
          breakfast += totalCalories;
        } else if (mealType == 'Lunch') {
          lunch += totalCalories;
        } else if (mealType == 'Dinner') {
          dinner += totalCalories;
        }
      }

      setState(() {
        breakfastCalories = breakfast;
        lunchCalories = lunch;
        dinnerCalories = dinner;
        totalProteinCalories = proteinCalories;
        totalFatsCalories = fatsCalories;
        totalCarbsCalories = carbsCalories;
        isLoading = false;
      });
    } catch (e) {
      // Handle errors appropriately
      setState(() {
        isLoading = false;
      });
      print("Error retrieving data: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.pageBackground,
      appBar: AppBar(
        backgroundColor: AppColors.pageBackground,
        title: const Text('WELCOME TO DASHBOARD', style: TextStyle(color: Colors.white)),
      ),
      body: isLoading ? const Center(child: CircularProgressIndicator()) : buildDashboardContent(),
    );
  }

  Widget buildDashboardContent() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text(
              'Daily Activity',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                buildCalorieContainer('Breakfast', breakfastCalories, AppColors.contentColorPurple.withOpacity(0.7)),
                buildCalorieContainer('Lunch', lunchCalories, Colors.lightBlueAccent),
                buildCalorieContainer('Dinner', dinnerCalories, AppColors.contentColorYellow),
              ],
            ),
            const SizedBox(height: 20),
            PieChartSample2(
              proteinCalories: totalProteinCalories ?? 0,
              fatsCalories: totalFatsCalories ?? 0,
              carbsCalories: totalCarbsCalories ?? 0,
            ),
          ],
        ),
      ),
    );
  }

  Widget buildCalorieContainer(String meal, int? calories, Color color) {
    return Expanded(
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 8.0),
        padding: const EdgeInsets.all(8.0),
        decoration: BoxDecoration(
          color: color,
          border: Border.all(color: Colors.black),
          borderRadius: BorderRadius.circular(8.0),
        ),
        child: Column(
          children: [
            Text(meal, style: const TextStyle(fontSize: 18, color: Colors.white)),
            const SizedBox(height: 8),
            Text(
              '${calories ?? 0} kcal',
              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.white),
            ),
          ],
        ),
      ),
    );
  }
}

class PieChartSample2 extends StatefulWidget {
  final int proteinCalories;
  final int fatsCalories;
  final int carbsCalories;

  const PieChartSample2({
    super.key,
    required this.proteinCalories,
    required this.fatsCalories,
    required this.carbsCalories,
  });

  @override
  State<StatefulWidget> createState() => PieChart2State();
}

class PieChart2State extends State<PieChartSample2> {
  int touchedIndex = -1;

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        Flexible(
          fit: FlexFit.loose,
          flex: 1000000,
          child: AspectRatio(
            aspectRatio: 3.2,
            child: PieChart(
              PieChartData(
                pieTouchData: PieTouchData(
                  touchCallback: (FlTouchEvent event, pieTouchResponse) {
                    setState(() {
                      if (!event.isInterestedForInteractions || pieTouchResponse?.touchedSection == null) {
                        touchedIndex = -1;
                        return;
                      }
                      touchedIndex = pieTouchResponse!.touchedSection!.touchedSectionIndex;
                    });
                  },
                ),
                borderData: FlBorderData(show: false),
                sectionsSpace: 0,
                centerSpaceRadius: 40,
                sections: showingSections(),
              ),
            ),
          ),
        ),
        const SizedBox(width: 0.2),
        const Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Indicator(
              color: AppColors.contentColorBlue,
              text: 'PROTEIN',
              isSquare: true,
              textColor: Colors.white,
            ),
            SizedBox(height: 4),
            Indicator(
              color: AppColors.contentColorYellow,
              text: 'FATS',
              isSquare: true,
              textColor: Colors.white,
            ),
            SizedBox(height: 4),
            Indicator(
              color: AppColors.contentColorPurple,
              text: 'CARBOHYDRATE',
              isSquare: true,
              textColor: Colors.white,
            ),
          ],
        ),
      ],
    );
  }

  List<PieChartSectionData> showingSections() {
    final totalCalories = widget.proteinCalories + widget.fatsCalories + widget.carbsCalories;

    final proteinPercentage = (widget.proteinCalories / totalCalories) * 100;
    final fatsPercentage = (widget.fatsCalories / totalCalories) * 100;
    final carbsPercentage = (widget.carbsCalories / totalCalories) * 100;

    return List.generate(3, (i) {
      final isTouched = i == touchedIndex;
      final fontSize = isTouched ? 25.0 : 16.0;
      final radius = isTouched ? 70.0 : 60.0;
      const shadows = [Shadow(color: Colors.black, blurRadius: 2)];

      switch (i) {
        case 0:
          return PieChartSectionData(
            color: AppColors.contentColorBlue,
            value: proteinPercentage,
            title: '${proteinPercentage.toStringAsFixed(1)}%',
            radius: radius,
            titleStyle: TextStyle(
              fontSize: fontSize,
              fontWeight: FontWeight.bold,
              color: AppColors.mainTextColor1,
              shadows: shadows,
            ),
          );
        case 1:
          return PieChartSectionData(
            color: AppColors.contentColorYellow,
            value: fatsPercentage,
            title: '${fatsPercentage.toStringAsFixed(1)}%',
            radius: radius,
            titleStyle: TextStyle(
              fontSize: fontSize,
              fontWeight: FontWeight.bold,
              color: AppColors.mainTextColor1,
              shadows: shadows,
            ),
          );
        case 2:
          return PieChartSectionData(
            color: AppColors.contentColorPurple,
            value: carbsPercentage,
            title: '${carbsPercentage.toStringAsFixed(1)}%',
            radius: radius,
            titleStyle: TextStyle(
              fontSize: fontSize,
              fontWeight: FontWeight.bold,
              color: AppColors.mainTextColor1,
              shadows: shadows,
            ),
          );
        default:
          throw Error();
      }
    });
  }
}
